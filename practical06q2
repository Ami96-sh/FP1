import scala.io.StdIn._

object q2 extends App {

  // Function to validate input
  def validateInput(name: String, marks: Int, totalMarks: Int): (Boolean, Option[String]) = {
    if (name.isEmpty) {
      (false, Some("Name cannot be empty."))
    } 
    else if (marks < 0 || totalMarks < 0) {
      (false, Some("Marks and total marks must be positive integers."))
    } 
    else if (marks > totalMarks) {
      (false, Some("Marks cannot exceed total possible marks."))
    } 
    else {
      (true, None)
    }
  }

  // Function to get student info
  def getStudentInfo(name: String, marks: Int, totalMarks: Int): (String, Int, Int, Double, Char) = {
    val percentage = (marks.toDouble / totalMarks) * 100
    val grade = percentage match {
      case p if p >= 90 => 'A'
      case p if p >= 75 => 'B'
      case p if p >= 50 => 'C'
      case _ => 'D'
    }
    (name, marks, totalMarks, percentage, grade)
  }

  // Function to print record
  def printStudentRecord(record: (String, Int, Int, Double, Char)): Unit = {
    val (name, marks, totalMarks, percentage, grade) = record
    println(s"Name: $name")
    println(s"Marks: $marks/$totalMarks")
    println(s"Percentage: ${String.format("%.2f", percentage)}%%")
    println(s"Grade: $grade")
  }

  // Function to get student info with retry
  def getStudentInfoWithRetry(): (String, Int, Int, Double, Char) = {
    var valid = false
    var name: String = ""
    var marks: Int = 0
    var totalMarks: Int = 0

    while (!valid) {
      println("Enter student's name:")
      name = readLine()

      println("Enter student's marks:")
      marks = readInt()

      println("Enter total possible marks:")
      totalMarks = readInt()

      val (isValid, errorMessage) = validateInput(name, marks, totalMarks)
      if (!isValid) {
        println(s"Invalid input: ${errorMessage.get}")
      } else {
        valid = true
      }
    }

    getStudentInfo(name, marks, totalMarks)
  }

  val studentRecord = getStudentInfoWithRetry()
  printStudentRecord(studentRecord)
}
